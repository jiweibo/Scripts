cmake_minimum_required(VERSION 3.0)
project(inference_test CXX C)
option(WITH_MKL "Compile demo with MKL/OpenBLAS support, default use MKL." ON)
option(WITH_GPU "Compile demo with GPU/CPU, default use CPU.", OFF)
option(WITH_STATIC_LIB "Compile demo with static/shared library, default use shared." OFF)
option(USE_TENSORRT, "COmpile demo with TensorRT.", OFF)

if (NOT DEFINED PADDLE_LIB)
  message(FATAL_ERROR "please set PADDLE_LIB with -DPADDLE_LIB=/path/paddle/lib")
endif()
if (NOT DEFINED DEMO_NAME)
  message(FATAL_ERROR "please set DEMO_NAME with -DDEMO_NAME=demo_name")
endif()

include_directories("${PADDLE_LIB}/")
set(PADDLE_LIB_THIRD_PARTY_PATH "${PADDLE_LIB}/third_party/install/")
include_directories("${PADDLE_LIB_THIRD_PARTY_PATH}protobuf/include")
include_directories("${PADDLE_LIB_THIRD_PARTY_PATH}glog/include")
include_directories("${PADDLE_LIB_THIRD_PARTY_PATH}gflags/include")
include_directories("${PADDLE_LIB_THIRD_PARTY_PATH}xxhash/include")
include_directories("${PADDLE_LIB_THIRD_PARTY_PATH}zlib/include")
include_directories("${PADDLE_LIB}third_party/boost")
include_directories("${PADDLE_LIB}third_party/eigen3")
include_directories("${PADDLE_LIB}paddle/include")

include_directories("${PADDLE_LIB_THIRD_PARTY_PATH}zlib/lib")
include_directories("${PADDLE_LIB_THIRD_PARTY_PATH}protobuf/lib")
include_directories("${PADDLE_LIB_THIRD_PARTY_PATH}glog/lib")
include_directories("${PADDLE_LIB_THIRD_PARTY_PATH}gflags/lib")
include_directories("${PADDLE_LIB_THIRD_PARTY_PATH}xxhash/lib")
include_directories("${PADDLE_LIB}paddle/lib")


set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}" -g -O0 -std=c++11)
message("flags" ${CMAKE_CXX_FLAGS})

if(WITH_GPU)
  set(CUDA_LIB "/usr/local/cuda/lib64/" CACHE STRING "CUDA Library")
endif()

if(USE_TENSORRT AND WITH_GPU)
  include_directories("${TENSORRT_INCLUDE_DIR}")
  link_directories("${TENSORRT_LIB_DIR}")
endif()

#todo add NGRAP
set(NGRAPH_PATH "${PADDLE_LIB_THIRD_PARTY_PATH}ngraph")
if(EXISTS ${NGRAPH_PATH})
  include(GNUInstallDirs)
  include_directories("${NGRAPH_PATH}/include")
  link_directories("${NGRAPH_PATH}/${CMAKE_INSTALL_LIBDIR}")
  set(NGRAPH_LIB ${NGRAPH_PATH}/${CMAKE_INSTALL_LIBDIR}/libngraph${CMAKE_SHARED_LIBRARY_SUFFIX})
endif()

add_executable(${DEMO_NAME} ${DEMO_NAME}.cc)

if(WITH_MKL)
  set(MATH_LIB_PATH "${PADDLE_LIB_THIRD_PARTY_PATH}mklml")
  include_directories("${MATH_LIB_PATH}/incldue")
  set(MATH_LIB ${MATH_LIB_PATH}/lib/libmklml_intel${CMAKE_SHARED_LIBRARY_SUFFIX}
               ${MATH_LIB_PATH}/lib/libiomp5${CMAKE_SHARED_LIBRARY_SUFFIX})
  set(MKLDNN_PATH "${PADDLE_LIB_THIRD_PARTY_PATH}mkldnn")
  if(EXISTS ${MKLDNN_PATH})
    include_directories("${MKLDNN_PATH}/include")
    set(MKLDNN_LIB ${MKLDNN_PATH}/lib/libmkldnn.so.0)
  endif()
else()
  set(MATH_LIB ${PADDLE_LIB_THIRD_PARTY_PATH}openblas/lib/libopenblas${CMAKE_STATIC_LIBRARY_SUFFIX})
endif()

# Note: libpaddle_inference_api.so/a must put before libpaddle_fluid.so/a
if(WITH_STATIC_LIB)
  set(DEPS ${PADDLE_LIB}/paddle/lib/libpaddle_fluid${CMAKE_STATIC_LIBRARY_SUFFIX})
else()
  set(DEPS ${PADDLE_LIB}/paddle/lib/libpaddle_fluid${CMAKE_SHARED_LIBRARY_SUFFIX})
endif()

set(EXTERNAL_LIB "-lrt -ldl -lpthread")
set(DEPS ${DEPS} ${MATH_LIB} ${MKLDNN_LIB} ${NGRAPH_LIB}
         glog gflags protobuf z xxhash snappy snappystream
         ${EXTERNAL_LIB})
set(DEPS ${DEPS} libcmt shlwapi)

if(WITH_GPU)
  if(USE_TENSORRT)
    set(DEPS ${DEPS} ${PADDLE_LIB}/third_party/install/tensorrt/lib/libnvinfer${CMAKE_STATIC_LIBRARY_SUFFIX}))
    set(DEPS ${DEPS} ${PADDLE_LIB}/third_party/install/tensorrt/lib/libnvinfer_plugin${CMAKE_STATIC_LIBRARY_SUFFIX})
  endif()
  set(DEPS ${DEPS} ${CUDA_LIB}/libcudart${CMAKE_SHARED_LIBRARY_SUFFIX})
  set(DEPS ${DEPS} ${CUDA_LIB}/cublas${CMAKE_STATIC_LIBRARY_SUFFIX} )
  set(DEPS ${DEPS} ${CUDA_LIB}/cudnn${CMAKE_STATIC_LIBRARY_SUFFIX} )
endif()

target_link_libraries(${DEMO_NAME} ${DEPS})
